'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import axios from 'axios';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import {
  Tent,
  Package,
  Calendar,
  CheckCircle,
  Clock,
  Search,
  Filter,
  Bell,
  Settings,
  LogOut,
  Eye,
  MessageCircle,
  Phone,
  Mail,
} from 'lucide-react';
import Link from 'next/link';
import type { LucideIcon } from 'lucide-react';
import { DialogHeader } from '@/components/ui/dialog';
import { Dialog, DialogContent, DialogDescription, DialogTitle } from '@radix-ui/react-dialog';

interface Order {
  id: string;
  customerName: string;        // s·ª≠a t·ª´ customer -> customerName
  email: string;               // th√™m email
  phone: string;
  people: number;              // th√™m s·ªë l∆∞·ª£ng ng∆∞·ªùi
  bookingDate: string;         // s·ª≠a t·ª´ date -> bookingDate
  totalPrice: number;          // th√™m t·ªïng gi√°
  specialRequests: string;     // th√™m y√™u c·∫ßu ƒë·∫∑c bi·ªát
  emergencyContact: string;    // th√™m th√¥ng tin li√™n h·ªá kh·∫©n c·∫•p
  emergencyPhone: string;      // th√™m s·ªë ƒëi·ªán tho·∫°i kh·∫©n c·∫•p
  priority: 'NORMAL' | 'HIGH' | 'LOW';
  status: 'PENDING' | 'CONFIRMED' | 'CANCELLED'; // s·ª≠a status cho tr√πng backend
}



interface EquipmentCheck {
  _id: string;
  name: string;
  code: string;
  lastCheck: string;
  nextCheck: string;
  status: 'due' | 'upcoming' | 'overdue';
}

interface Stat {
  title: string;
  value: string;
  icon: keyof typeof iconMap; // Restrict to iconMap keys
  color: string;
}

// Define iconMap with explicit types
const iconMap: { [key: string]: LucideIcon } = {
  Calendar,
  Clock,
  CheckCircle,
  Package,
};


export default function StaffDashboard() {
  const [selectedTab, setSelectedTab] = useState('orders');
  const [stats, setStats] = useState<Stat[]>([]);
  const [pendingOrders, setPendingOrders] = useState<Order[]>([]);
  const [equipmentChecks, setEquipmentChecks] = useState<EquipmentCheck[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchOrders, setSearchOrders] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const router = useRouter();
  // const [selectedTab, setSelectedTab] = useState("orders")
  const [selectedOrder, setSelectedOrder] = useState<any | null>(null)
  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        setError(null);

        const token =
          localStorage.getItem('authToken') || sessionStorage.getItem('authToken');
        if (!token) {
          console.log('Token kh√¥ng t·ªìn t·∫°i, redirect login');
          router.push('/login');
          return;
        }

        // Set default header
        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;

        // 1Ô∏è‚É£ L·∫•y user
        const userResponse = await axios.get('http://localhost:8080/users/me');
        const role = userResponse.data.role;
        console.log('User role:', role);
        if (!['staff', 'manager', 'guide'].includes(role)) {
          router.push('/login');
          return;
        }

        // 2Ô∏è‚É£ L·∫•y th·ªëng k√™
        const statsResponse = await axios.get('http://localhost:8080/stats/staff');
        setStats(statsResponse.data.stats);

        // 3Ô∏è‚É£ L·∫•y t·∫•t c·∫£ orders
        const ordersResponse = await axios.get('http://localhost:8080/apis/orders');
        console.log('Orders Response:', ordersResponse.data);

        // Convert bookingDate v·ªÅ string ƒë·ªÉ frontend hi·ªÉn th·ªã
        const orders: Order[] = ordersResponse.data.map((order: any) => ({
          ...order,
          bookingDate: order.bookingDate || order.date || '', // fallback n·∫øu kh√°c t√™n field
        }));
        setPendingOrders(orders);

        // 4Ô∏è‚É£ L·∫•y equipment checks
        const equipmentResponse = await axios.get('http://localhost:8080/equipment/checks');
        setEquipmentChecks(equipmentResponse.data);
      } catch (err: any) {
        console.error('L·ªói fetchData:', err);
        if (err.response?.status === 401 || err.response?.status === 403) {
          localStorage.removeItem('authToken');
          localStorage.removeItem('user');
          sessionStorage.removeItem('authToken');
          sessionStorage.removeItem('user');
          router.push('/login');
        } else {
          setError(err.response?.data?.error || 'L·ªói khi t·∫£i d·ªØ li·ªáu');
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [router]);
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const ordersResponse = await axios.get('http://localhost:8080/apis/orders/all');
        setPendingOrders(ordersResponse.data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch order:", error);
      }
    };

    fetchOrders();
  }, []);

  const handleViewOrder = (order: any) => {
    console.log("üëâ handleViewOrder called with:", order); // log ngay ƒë·∫ßu
    setSelectedOrder(order);
    try {
      if (!order) {
        throw new Error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng");
      }
      setSelectedOrder(order);
      setError(null);
    } catch (err: any) {
      console.error("L·ªói khi ch·ªçn ƒë∆°n h√†ng:", err.message);
      setError(err.message);
      setSelectedOrder(null);
    }
  };


  const handleLogout = () => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('user');
    sessionStorage.removeItem('authToken');
    sessionStorage.removeItem('user');
    router.push('/login');
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'PENDING':
        return <Badge className="bg-yellow-100 text-yellow-800">Ch·ªù x·ª≠ l√Ω</Badge>;
      case 'CONFIRMED':
        return <Badge className="bg-green-100 text-green-800">ƒê√£ x√°c nh·∫≠n</Badge>;
      case 'CANCELLED':
        return <Badge className="bg-red-100 text-red-800">H·ªßy</Badge>;
      default:
        return <Badge variant="secondary">Kh√¥ng x√°c ƒë·ªãnh</Badge>;
    }
  };

  // const getPriorityBadge = (priority: string) => {
  //   switch (priority.toUpperCase()) {
  //     case 'HIGH':
  //       return <Badge variant="destructive">Cao</Badge>;
  //     case 'NORMAL':
  //       return <Badge className="bg-yellow-100 text-yellow-800">Trung b√¨nh</Badge>;
  //     case 'LOW':
  //       return <Badge className="bg-green-100 text-green-800">Th·∫•p</Badge>;
  //     default:
  //       return <Badge variant="secondary">B√¨nh th∆∞·ªùng</Badge>;
  //   }
  // };

  const filteredOrders = pendingOrders.filter((order) => {
    const matchesStatus = filterStatus === "all" || order.status === filterStatus;
    const matchesSearch =
      order.customerName.toLowerCase().includes(searchOrders.toLowerCase()) ||
      order.id.toLowerCase().includes(searchOrders.toLowerCase());
    return matchesStatus && matchesSearch;
  });


  if (isLoading) {
    return <div className="min-h-screen flex items-center justify-center">ƒêang t·∫£i...</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="border-b bg-white sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <Link href="/" className="flex items-center gap-2">
            <Tent className="h-8 w-8 text-green-600" />
            <span className="text-2xl font-bold text-green-800">OG Camping Staff</span>
          </Link>

          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm">
              <Bell className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm">
              <Settings className="w-4 h-4" />
            </Button>
            <Avatar>
              <AvatarImage src="/staff-avatar.png" />
              <AvatarFallback>ST</AvatarFallback>
            </Avatar>
            <Button variant="ghost" size="sm" onClick={handleLogout}>
              <LogOut className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">

        {/* Welcome Section */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Dashboard Nh√¢n vi√™n</h1>
          <p className="text-gray-600">Qu·∫£n l√Ω ƒë∆°n h√†ng v√† thi·∫øt b·ªã</p>
        </div>

        {/* Stats Cards */}
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {stats.map((stat, index) => {
            const Icon = iconMap[stat.icon]; // Now properly typed
            return (
              <Card key={index} className="hover:shadow-lg transition-shadow">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">{stat.title}</p>
                      <p className="text-3xl font-bold text-gray-900">{stat.value}</p>
                    </div>
                    <Icon className={`w-8 h-8 ${stat.color}`} />
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Main Content */}
        <Tabs value={selectedTab} onValueChange={setSelectedTab} className="space-y-6">
          <TabsList className="grid w-full lg:w-auto grid-cols-4">
            <TabsTrigger value="orders">ƒê∆°n h√†ng</TabsTrigger>
            <TabsTrigger value="equipment">Thi·∫øt b·ªã</TabsTrigger>
            <TabsTrigger value="customers">Kh√°ch h√†ng</TabsTrigger>
            <TabsTrigger value="reports">B√°o c√°o</TabsTrigger>
          </TabsList>

          <TabsContent value="orders" className="space-y-6">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>ƒê∆°n h√†ng c·∫ßn x·ª≠ l√Ω</CardTitle>
                    <CardDescription>Danh s√°ch ƒë∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω</CardDescription>
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm">
                      <Filter className="w-4 h-4 mr-2" />
                      L·ªçc
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex gap-4 mb-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <Input
                      placeholder="T√¨m ki·∫øm ƒë∆°n h√†ng..."
                      className="pl-10"
                      value={searchOrders}
                      onChange={(e) => setSearchOrders(e.target.value)}
                    />
                  </div>
                  <Select value={filterStatus} onValueChange={setFilterStatus}>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Tr·∫°ng th√°i" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">T·∫•t c·∫£</SelectItem>
                      <SelectItem value="PENDING">Ch·ªù x·ª≠ l√Ω</SelectItem>
                      <SelectItem value="CONFIRMED">ƒê√£ x√°c nh·∫≠n</SelectItem>
                      <SelectItem value="CANCELLED">H·ªßy</SelectItem>

                    </SelectContent>
                  </Select>
                </div>

                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>M√£ ƒë∆°n h√†ng</TableHead>
                      <TableHead>Email kh√°ch h√†ng </TableHead>
                      <TableHead>Kh√°ch h√†ng</TableHead>
                      <TableHead>D·ªãch v·ª•</TableHead>
                      <TableHead>Ng√†y</TableHead>
                      {/* <TableHead>∆Øu ti√™n</TableHead> */}
                      <TableHead>Tr·∫°ng th√°i</TableHead>
                      <TableHead>Thao t√°c</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredOrders.map((order) => (
                      <TableRow key={order.id}>
                        <TableCell className="font-medium">#OGC{Date.now()}</TableCell>
                        <TableCell className="font-medium">{order.email}</TableCell>
                        <TableCell>
                          <div>
                            <p className="font-medium">{order.customerName}</p>
                            <p className="text-sm text-gray-600">{order.phone}</p>
                          </div>
                        </TableCell>
                        <TableCell>{order.totalPrice ? order.totalPrice.toLocaleString() + ' ƒë' : '-'} </TableCell>
                        <TableCell>{new Date(order.bookingDate).toLocaleString()}</TableCell>
                        {/* <TableCell>{getPriorityBadge(order.priority)}</TableCell> */}
                        <TableCell>{getStatusBadge(order.status)}</TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => {
                                console.log("üëâ Eye clicked for order:", order); // log khi click
                                handleViewOrder(order);
                              }}
                            >
                              <Eye className="w-4 h-4" />
                            </Button>

                            <Button variant="ghost" size="sm"><Phone className="w-4 h-4" /></Button>
                            <Button variant="ghost" size="sm"><MessageCircle className="w-4 h-4" /></Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>


                </Table>
              </CardContent>
            </Card>
            {error && (
              <div className="text-red-600 font-semibold mt-4">
                ‚ö† {error}
              </div>
            )}

            {/* Quick Actions */}
            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>X·ª≠ l√Ω nhanh</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <Button className="w-full justify-start">
                    <CheckCircle className="w-4 h-4 mr-2" />
                    X√°c nh·∫≠n ƒë∆°n h√†ng
                  </Button>
                  <Button variant="outline" className="w-full justify-start">
                    <Phone className="w-4 h-4 mr-2" />
                    G·ªçi kh√°ch h√†ng
                  </Button>
                  <Button variant="outline" className="w-full justify-start">
                    <Mail className="w-4 h-4 mr-2" />
                    G·ª≠i email x√°c nh·∫≠n
                  </Button>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Ghi ch√∫ nhanh</CardTitle>
                </CardHeader>
                <CardContent>
                  <Textarea placeholder="Ghi ch√∫ v·ªÅ ƒë∆°n h√†ng, kh√°ch h√†ng..." rows={4} />
                  <Button className="w-full mt-3">L∆∞u ghi ch√∫</Button>
                </CardContent>
              </Card>
            </div>
            {selectedOrder && (
              <div className="fixed inset-0 bg-black bg-opacity-40 flex justify-center items-center z-50">
                <div className="bg-white p-6 rounded-2xl shadow-xl w-[500px] max-h-[90vh] overflow-y-auto">
                  {/* Header */}
                  <div className="text-center mb-4">
                    {/* Logo */}
                    <div className="flex items-left justify-left mb-2">
                      <Tent className="h-6 w-6 text-green-600" />
                    <span className="text-xl font-bold text-green-800">OG CAMPING BILL </span>
                    </div>
                    {/* H√≥a ƒë∆°n */}
                    <h2 className="text-2xl font-bold text-gray-800">üßæ H√≥a ƒë∆°n ƒë·∫∑t tour</h2>
                    <p className="text-sm text-gray-500 mt-1">M√£ ƒë∆°n h√†ng: #{selectedOrder.id}</p>
                  </div>

                  {/* Body */}
                  <div className="divide-y divide-gray-200 border rounded-lg">
                    <div className="grid grid-cols-2 p-3 bg-gray-50">
                      <p className="font-semibold text-gray-600">T√™n kh√°ch h√†ng</p>
                      <p className="text-gray-800">{selectedOrder.customerName}</p>
                    </div>
                    <div className="grid grid-cols-2 p-3">
                      <p className="font-semibold text-gray-600">Email</p>
                      <p className="text-gray-800">{selectedOrder.email}</p>
                    </div>
                    <div className="grid grid-cols-2 p-3 bg-gray-50">
                      <p className="font-semibold text-gray-600">S·ªë ƒëi·ªán tho·∫°i</p>
                      <p className="text-gray-800">{selectedOrder.phone}</p>
                    </div>
                    <div className="grid grid-cols-2 p-3">
                      <p className="font-semibold text-gray-600">Ng√†y ƒë·∫∑t</p>
                      <p className="text-gray-800">
                        {new Date(selectedOrder.orderDate).toLocaleString("vi-VN")}
                      </p>
                    </div>
                    <div className="grid grid-cols-2 p-3 bg-gray-50">
                      <p className="font-semibold text-gray-600">Gi√° ti·ªÅn</p>
                      <p className="text-gray-800 font-medium">
                        {selectedOrder.totalPrice?.toLocaleString("vi-VN")} VND
                      </p>
                    </div>
                    <div className="grid grid-cols-2 p-3">
                      <p className="font-semibold text-gray-600">Tour ƒë·∫∑t</p>
                      <p className="text-gray-800">
                        {selectedOrder.service?.name || "Ch∆∞a c√≥ th√¥ng tin"}
                      </p>
                    </div>
                    <div className="grid grid-cols-2 p-3 bg-gray-50">
                      <p className="font-semibold text-gray-600">D·ªãch v·ª• ƒë√£ ch·ªçn</p>
                      <p className="text-gray-800">
                        {selectedOrder.serviceName || "Ch∆∞a c√≥ th√¥ng tin"}
                      </p>
                    </div>
                    <div className="grid grid-cols-2 p-3">
                      <p className="font-semibold text-gray-600">Thi·∫øt b·ªã thu√™</p>
                      <p className="text-gray-800">
                        {selectedOrder.equipment || "Kh√¥ng thu√™"}
                      </p>
                    </div>
                    <div className="grid grid-cols-2 p-3 bg-gray-50">
                      <p className="font-semibold text-gray-600">S·ªë ng∆∞·ªùi tham gia</p>
                      <p className="text-gray-800">{selectedOrder.people}</p>
                    </div>
                    <div className="grid grid-cols-2 p-3">
                      <p className="font-semibold text-gray-600">Y√™u c·∫ßu ƒë·∫∑c bi·ªát</p>
                      <p className="text-gray-800">
                        {selectedOrder.specialRequests || "Kh√¥ng c√≥"}
                      </p>
                    </div>
                    <div className="grid grid-cols-2 p-3 bg-gray-50">
                      <p className="font-semibold text-gray-600">Ng∆∞·ªùi li√™n h·ªá kh·∫©n c·∫•p</p>
                      <p className="text-gray-800">
                        {selectedOrder.emergencyContact || "Kh√¥ng c√≥"}
                      </p>
                    </div>
                    <div className="grid grid-cols-2 p-3">
                      <p className="font-semibold text-gray-600">SƒêT kh·∫©n c·∫•p</p>
                      <p className="text-gray-800">
                        {selectedOrder.emergencyPhone || "Kh√¥ng c√≥"}
                      </p>
                    </div>
                  </div>

                  {/* Footer */}
                  <p className="text-center text-gray-500 text-sm mt-6">
                    üéâ C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!
                  </p>

                  <div className="flex justify-end mt-4">
                    <button
                      className="px-6 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
                      onClick={() => setSelectedOrder(null)}
                    >
                      ƒê√≥ng
                    </button>
                  </div>
                </div>
              </div>
            )}




          </TabsContent>

          <TabsContent value="equipment">
            <Card>
              <CardHeader>
                <CardTitle>Ki·ªÉm tra thi·∫øt b·ªã</CardTitle>
                <CardDescription>L·ªãch ki·ªÉm tra v√† b·∫£o tr√¨ thi·∫øt b·ªã</CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>T√™n thi·∫øt b·ªã</TableHead>
                      <TableHead>M√£ thi·∫øt b·ªã</TableHead>
                      <TableHead>L·∫ßn ki·ªÉm tra cu·ªëi</TableHead>
                      <TableHead>Ki·ªÉm tra ti·∫øp theo</TableHead>
                      <TableHead>Tr·∫°ng th√°i</TableHead>
                      <TableHead>Thao t√°c</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {equipmentChecks.map((equipment) => (
                      <TableRow key={equipment._id}>
                        <TableCell className="font-medium">{equipment.name}</TableCell>
                        <TableCell>{equipment.code}</TableCell>
                        <TableCell>{equipment.lastCheck}</TableCell>
                        <TableCell>{equipment.nextCheck}</TableCell>
                        <TableCell>{getStatusBadge(equipment.status)}</TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            <Button variant="ghost" size="sm">
                              <Eye className="w-4 h-4" />
                            </Button>
                            <Button variant="ghost" size="sm">
                              <CheckCircle className="w-4 h-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="customers">
            <Card>
              <CardHeader>
                <CardTitle>H·ªó tr·ª£ kh√°ch h√†ng</CardTitle>
                <CardDescription>Qu·∫£n l√Ω y√™u c·∫ßu h·ªó tr·ª£ t·ª´ kh√°ch h√†ng</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8 text-gray-500">
                  <MessageCircle className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                  <p>T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="reports">
            <Card>
              <CardHeader>
                <CardTitle>B√°o c√°o c√¥ng vi·ªác</CardTitle>
                <CardDescription>T·∫°o b√°o c√°o h√†ng ng√†y</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8 text-gray-500">
                  <Calendar className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                  <p>T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}